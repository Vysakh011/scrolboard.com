#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <SoftwareSerial.h>
#define LED_PIN D5
#define LED_PIN_1 D6  // WiFi status indicator
#define LED_PIN_2 D4

// WiFi credentials
const char* ssid = "Abcde";  
const char* password = "";  

// MQTT broker details
const char* mqttServer = "broker.hivemq.com";
const int mqttPort = 1883;
const char* mqttTopic = "ece/diFJBNOUIFOVSKJIGWIGJ";  

SoftwareSerial softSerial(4, 5); 

WiFiClient espClient;
PubSubClient client(espClient);

// Timer for reset
unsigned long previousMillis = 0; 
const unsigned long resetInterval = 3600000; 

// Timer for LED blinking
unsigned long ledBlinkPreviousMillis = 0;
const unsigned long ledBlinkInterval = 500; // 500 ms blink interval
bool ledState = LOW; // Current state of the LED

// Function to reconnect to broker
void reconnectMQTT() {
  while (!client.connected()) {
    Serial.println("Reconnecting to HiveMQ...");
    String clientId = "NodeMCUClient-" + String(random(0xffff), HEX);
    if (client.connect(clientId.c_str())) {
      Serial.println("Reconnected to HiveMQ");
      client.subscribe(mqttTopic);
      digitalWrite(LED_PIN, HIGH); 
    } else {
      Serial.println("Failed to connect to HiveMQ. Retrying...");
      digitalWrite(LED_PIN, LOW); 
      delay(2000);
    }
  }
}

// Callback function to handle received messages
void callback(char* topic, byte* payload, unsigned int length) {
  if (length == 0) return;

  String message;
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  Serial.println("Message received: " + message);

  if (message == "OFF") digitalWrite(LED_PIN_2, HIGH); 
  else if (message == "ON") digitalWrite(LED_PIN_2, LOW); 

  softSerial.println(message); 
}

void setup() {
  softSerial.begin(9600); // communication with ESP32 
  Serial.begin(115200); //serial monitor for debugging
  pinMode(LED_PIN, OUTPUT);
  pinMode(LED_PIN_1, OUTPUT);
  pinMode(LED_PIN_2, OUTPUT);
  WiFi.begin(ssid, password);// Connect to WiFi
  Serial.println("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
    digitalWrite(LED_PIN_1, LOW); // Turn off LED while connecting
  }
  Serial.println("\nConnected to WiFi");
  digitalWrite(LED_PIN_1, HIGH); // Turn on LED when WiFi is connected

  // MQTT Setup 
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);
  reconnectMQTT();
}

void loop() {
  // Ensure WiFi is connected
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi disconnected. Reconnecting...");
    digitalWrite(LED_PIN_1, LOW); // Turn off LED when WiFi is disconnected
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
      delay(1000);
      Serial.print(".");
    }
    Serial.println("\nReconnected to WiFi.");
    digitalWrite(LED_PIN_1, HIGH); // Turn on LED when WiFi is reconnected
  }

  // Ensure MQTT connection is active
  if (!client.connected()) {
    unsigned long currentMillis = millis();
    if (currentMillis - ledBlinkPreviousMillis >= ledBlinkInterval) {
      ledBlinkPreviousMillis = currentMillis;
      ledState = !ledState; 
      digitalWrite(LED_PIN, ledState);
    }
    reconnectMQTT();
  } else {
    digitalWrite(LED_PIN, HIGH); // Keep LED on when connected
  }

  client.loop(); // Maintain MQTT connection

  // checking purpose
  if (softSerial.available()) {
    String receivedData = softSerial.readStringUntil('\n'); 
    Serial.print("Data received on GPIO 5: ");
    Serial.println(receivedData); // Print the received data
  }

  // Check if time to reset 
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= resetInterval) {
    Serial.println("1 hour elapsed. Restarting the NodeMCU...");
    ESP.restart(); // Reset NodeMCU
  }
}
